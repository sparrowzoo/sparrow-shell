2025-03-14 13:40:46.613 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 13:40:54.983 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("name", (o, r) -> o.getName());


setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 13:40:57.482 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("name", (o, r) -> o.getName());


setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 13:41:00.042 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.json.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.json.User, Object>> setMap = new HashMap<>();

static {

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("extend", (o, r) -> o.getExtend());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("parent", (o, r) -> o.getParent());


setMap.put("extend", (o, arg) -> o.setExtend((java.util.Map) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.String) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("parent", (o, arg) -> o.setParent((com.sparrow.json.User) arg));

}
public Object get(Object o, String methodName){
com.sparrow.json.User user=(com.sparrow.json.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.json.User user=(com.sparrow.json.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 20:58:42.290 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 20:58:44.023 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 20:58:44.486 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 20:58:44.884 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.json.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.json.User, Object>> setMap = new HashMap<>();

static {

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("extend", (o, r) -> o.getExtend());

getMap.put("parent", (o, r) -> o.getParent());


setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.String) arg));

setMap.put("extend", (o, arg) -> o.setExtend((java.util.Map) arg));

setMap.put("parent", (o, arg) -> o.setParent((com.sparrow.json.User) arg));

}
public Object get(Object o, String methodName){
com.sparrow.json.User user=(com.sparrow.json.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.json.User user=(com.sparrow.json.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 20:58:45.180 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2025-03-14 20:58:45.481 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2025-03-14 20:58:45.693 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2025-03-14 20:58:45.817 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 20:58:46.070 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 20:58:46.415 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 20:58:46.672 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2025-03-14 20:58:47.070 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2025-03-14 20:58:47.269 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 20:58:47.433 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2025-03-14 20:58:47.639 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2025-03-14 20:58:47.864 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2025-03-14 20:58:48.020 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2025-03-14 20:58:48.164 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2025-03-14 20:58:48.306 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2025-03-14 20:58:48.493 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2025-03-14 20:58:48.650 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2025-03-14 20:58:48.849 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("category", (o, r) -> o.getCategory());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("category", (o, arg) -> o.setCategory((java.lang.Integer) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2025-03-14 20:58:49.138 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2025-03-14 20:58:49.263 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2025-03-14 20:58:49.356 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2025-03-14 20:58:49.460 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("message", (o, r) -> o.getMessage());

getMap.put("data", (o, r) -> o.getData());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2025-03-14 20:58:49.585 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("description", (o, r) -> o.getDescription());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2025-03-14 20:58:49.783 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2025-03-14 20:58:50.023 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2025-03-14 20:58:50.156 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2025-03-14 20:58:50.302 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("id", (o, r) -> o.getId());

getMap.put("data", (o, r) -> o.getData());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2025-03-14 20:58:50.425 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2025-03-14 20:58:50.536 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2025-03-14 20:58:50.659 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2025-03-14 20:58:50.773 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2025-03-14 20:58:50.890 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2025-03-14 21:09:41.056 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 21:09:42.828 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 21:09:43.298 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 21:09:43.710 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.json.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.json.User, Object>> setMap = new HashMap<>();

static {

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("extend", (o, r) -> o.getExtend());

getMap.put("parent", (o, r) -> o.getParent());


setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.String) arg));

setMap.put("extend", (o, arg) -> o.setExtend((java.util.Map) arg));

setMap.put("parent", (o, arg) -> o.setParent((com.sparrow.json.User) arg));

}
public Object get(Object o, String methodName){
com.sparrow.json.User user=(com.sparrow.json.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.json.User user=(com.sparrow.json.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 21:09:44.032 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2025-03-14 21:09:44.266 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2025-03-14 21:09:44.423 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2025-03-14 21:09:44.552 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 21:09:44.811 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 21:09:45.168 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("nickName", (o, r) -> o.getNickName());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 21:09:45.511 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2025-03-14 21:09:45.948 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2025-03-14 21:09:46.161 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 21:09:46.305 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2025-03-14 21:09:46.555 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2025-03-14 21:09:46.793 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2025-03-14 21:09:47.057 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2025-03-14 21:09:47.242 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2025-03-14 21:09:47.388 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2025-03-14 21:09:47.562 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2025-03-14 21:09:47.757 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2025-03-14 21:09:47.881 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("category", (o, r) -> o.getCategory());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("category", (o, arg) -> o.setCategory((java.lang.Integer) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2025-03-14 21:09:48.200 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2025-03-14 21:09:48.312 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2025-03-14 21:09:48.402 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2025-03-14 21:09:48.498 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("message", (o, r) -> o.getMessage());

getMap.put("data", (o, r) -> o.getData());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2025-03-14 21:09:48.623 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("description", (o, r) -> o.getDescription());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2025-03-14 21:09:48.808 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2025-03-14 21:09:48.990 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2025-03-14 21:09:49.181 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2025-03-14 21:09:49.292 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("id", (o, r) -> o.getId());

getMap.put("data", (o, r) -> o.getData());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2025-03-14 21:09:49.396 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2025-03-14 21:09:49.521 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2025-03-14 21:09:49.642 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2025-03-14 21:09:49.765 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2025-03-14 21:09:49.905 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2025-03-14 21:10:34.159 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 21:10:35.904 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 21:10:36.355 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 21:10:36.742 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.json.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.json.User, Object>> setMap = new HashMap<>();

static {

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("extend", (o, r) -> o.getExtend());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("parent", (o, r) -> o.getParent());


setMap.put("extend", (o, arg) -> o.setExtend((java.util.Map) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.String) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("parent", (o, arg) -> o.setParent((com.sparrow.json.User) arg));

}
public Object get(Object o, String methodName){
com.sparrow.json.User user=(com.sparrow.json.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.json.User user=(com.sparrow.json.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 21:10:37.053 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2025-03-14 21:10:37.320 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2025-03-14 21:10:37.536 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2025-03-14 21:10:37.663 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 21:10:38.028 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 21:10:38.308 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 21:10:38.573 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2025-03-14 21:10:38.983 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2025-03-14 21:10:39.267 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 21:10:39.438 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2025-03-14 21:10:39.683 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2025-03-14 21:10:39.877 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2025-03-14 21:10:40.027 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2025-03-14 21:10:40.159 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2025-03-14 21:10:40.329 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2025-03-14 21:10:40.525 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2025-03-14 21:10:40.833 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2025-03-14 21:10:41.085 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("category", (o, r) -> o.getCategory());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("days", (o, r) -> o.getDays());

getMap.put("extensions", (o, r) -> o.getExtensions());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("category", (o, arg) -> o.setCategory((java.lang.Integer) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2025-03-14 21:10:41.214 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2025-03-14 21:10:41.331 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2025-03-14 21:10:41.447 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2025-03-14 21:10:41.555 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("message", (o, r) -> o.getMessage());

getMap.put("data", (o, r) -> o.getData());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2025-03-14 21:10:41.780 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("description", (o, r) -> o.getDescription());


setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2025-03-14 21:10:42.023 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2025-03-14 21:10:42.200 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2025-03-14 21:10:42.299 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2025-03-14 21:10:42.424 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("id", (o, r) -> o.getId());

getMap.put("data", (o, r) -> o.getData());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2025-03-14 21:10:42.529 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2025-03-14 21:10:42.650 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2025-03-14 21:10:42.780 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2025-03-14 21:10:42.902 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2025-03-14 21:10:43.024 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2025-03-14 21:13:01.307 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 21:13:03.059 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("name", (o, r) -> o.getName());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 21:13:03.516 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("name", (o, r) -> o.getName());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 21:13:03.936 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.json.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.json.User, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("extend", (o, r) -> o.getExtend());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("parent", (o, r) -> o.getParent());


setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extend", (o, arg) -> o.setExtend((java.util.Map) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.String) arg));

setMap.put("parent", (o, arg) -> o.setParent((com.sparrow.json.User) arg));

}
public Object get(Object o, String methodName){
com.sparrow.json.User user=(com.sparrow.json.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.json.User user=(com.sparrow.json.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 21:13:04.249 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2025-03-14 21:13:04.557 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2025-03-14 21:13:04.745 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2025-03-14 21:13:04.950 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("name", (o, r) -> o.getName());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 21:13:05.177 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("name", (o, r) -> o.getName());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 21:13:05.543 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("cent", (o, r) -> o.getCent());


setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 21:13:05.787 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2025-03-14 21:13:06.163 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("id", (o, r) -> o.getId());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2025-03-14 21:13:06.354 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 21:13:06.488 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2025-03-14 21:13:06.684 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2025-03-14 21:13:06.933 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2025-03-14 21:13:07.088 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2025-03-14 21:13:07.219 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());


setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2025-03-14 21:13:07.363 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2025-03-14 21:13:07.548 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2025-03-14 21:13:07.697 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2025-03-14 21:13:07.954 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("category", (o, r) -> o.getCategory());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("category", (o, arg) -> o.setCategory((java.lang.Integer) arg));

setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2025-03-14 21:13:08.186 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2025-03-14 21:13:08.358 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2025-03-14 21:13:08.543 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2025-03-14 21:13:08.659 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("data", (o, r) -> o.getData());

getMap.put("message", (o, r) -> o.getMessage());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2025-03-14 21:13:08.892 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());


setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2025-03-14 21:13:09.033 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2025-03-14 21:13:09.204 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2025-03-14 21:13:09.299 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2025-03-14 21:13:09.406 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("data", (o, r) -> o.getData());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2025-03-14 21:13:09.528 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2025-03-14 21:13:09.631 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2025-03-14 21:13:09.735 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2025-03-14 21:13:09.873 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2025-03-14 21:13:09.977 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2025-03-14 21:14:09.456 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 21:14:11.231 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 21:14:11.719 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 21:14:12.167 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.json.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.json.User, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("extend", (o, r) -> o.getExtend());

getMap.put("parent", (o, r) -> o.getParent());


setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.String) arg));

setMap.put("extend", (o, arg) -> o.setExtend((java.util.Map) arg));

setMap.put("parent", (o, arg) -> o.setParent((com.sparrow.json.User) arg));

}
public Object get(Object o, String methodName){
com.sparrow.json.User user=(com.sparrow.json.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.json.User user=(com.sparrow.json.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 21:14:12.442 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2025-03-14 21:14:12.647 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2025-03-14 21:14:12.778 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2025-03-14 21:14:12.883 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 21:14:13.108 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 21:14:13.454 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 21:14:13.813 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2025-03-14 21:14:14.235 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2025-03-14 21:14:14.457 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 21:14:14.595 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2025-03-14 21:14:14.746 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2025-03-14 21:14:15.031 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2025-03-14 21:14:15.250 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2025-03-14 21:14:15.431 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2025-03-14 21:14:15.574 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2025-03-14 21:14:15.743 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2025-03-14 21:14:15.918 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2025-03-14 21:14:16.035 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("category", (o, r) -> o.getCategory());

getMap.put("days", (o, r) -> o.getDays());

getMap.put("extensions", (o, r) -> o.getExtensions());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("category", (o, arg) -> o.setCategory((java.lang.Integer) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2025-03-14 21:14:16.319 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2025-03-14 21:14:16.493 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2025-03-14 21:14:16.652 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2025-03-14 21:14:16.777 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("data", (o, r) -> o.getData());

getMap.put("message", (o, r) -> o.getMessage());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2025-03-14 21:14:16.916 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2025-03-14 21:14:17.072 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2025-03-14 21:14:17.268 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2025-03-14 21:14:17.420 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2025-03-14 21:14:17.611 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("data", (o, r) -> o.getData());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2025-03-14 21:14:17.791 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2025-03-14 21:14:17.991 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2025-03-14 21:14:18.128 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2025-03-14 21:14:18.245 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2025-03-14 21:14:18.357 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2025-03-14 21:15:55.653 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 21:15:57.375 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("name", (o, r) -> o.getName());


setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 21:15:57.834 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("name", (o, r) -> o.getName());


setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 21:15:58.265 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.json.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.json.User, Object>> setMap = new HashMap<>();

static {

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("extend", (o, r) -> o.getExtend());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("parent", (o, r) -> o.getParent());


setMap.put("extend", (o, arg) -> o.setExtend((java.util.Map) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.String) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("parent", (o, arg) -> o.setParent((com.sparrow.json.User) arg));

}
public Object get(Object o, String methodName){
com.sparrow.json.User user=(com.sparrow.json.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.json.User user=(com.sparrow.json.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 21:15:58.536 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2025-03-14 21:15:58.736 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2025-03-14 21:15:58.872 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2025-03-14 21:15:58.994 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("name", (o, r) -> o.getName());


setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2025-03-14 21:15:59.261 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("name", (o, r) -> o.getName());


setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2025-03-14 21:15:59.616 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("cent", (o, r) -> o.getCent());


setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2025-03-14 21:15:59.923 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2025-03-14 21:16:00.346 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("id", (o, r) -> o.getId());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2025-03-14 21:16:00.571 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2025-03-14 21:16:00.730 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2025-03-14 21:16:00.999 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2025-03-14 21:16:01.205 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2025-03-14 21:16:01.473 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2025-03-14 21:16:01.649 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("url", (o, r) -> o.getUrl());


setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2025-03-14 21:16:01.792 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2025-03-14 21:16:01.954 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2025-03-14 21:16:02.150 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2025-03-14 21:16:02.388 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("category", (o, r) -> o.getCategory());

getMap.put("days", (o, r) -> o.getDays());

getMap.put("extensions", (o, r) -> o.getExtensions());


setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("category", (o, arg) -> o.setCategory((java.lang.Integer) arg));

setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2025-03-14 21:16:02.712 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2025-03-14 21:16:02.834 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2025-03-14 21:16:02.925 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2025-03-14 21:16:03.035 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("data", (o, r) -> o.getData());

getMap.put("message", (o, r) -> o.getMessage());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2025-03-14 21:16:03.175 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());


setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2025-03-14 21:16:03.304 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2025-03-14 21:16:03.490 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2025-03-14 21:16:03.600 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2025-03-14 21:16:03.705 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("data", (o, r) -> o.getData());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2025-03-14 21:16:03.820 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2025-03-14 21:16:03.922 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2025-03-14 21:16:04.080 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2025-03-14 21:16:04.293 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2025-03-14 21:16:04.443 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2025-03-14 21:17:01.523 TRACE_ID DEBUG main JDBCTemplate SQL:select * from `user` where ( user.user_name = harry  AND user.nick_name = harry )OR( user.user_id = 2  OR nick_name = harry )
