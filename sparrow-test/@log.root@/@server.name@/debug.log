2024-04-23 22:05:43.060 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:05:44.042 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:05:44.253 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:05:44.416 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("name", (o, r) -> o.getName());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:05:44.851 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("name", (o, r) -> o.getName());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:05:45.063 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("cent", (o, r) -> o.getCent());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:05:45.315 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:05:45.701 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:05:45.845 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:05:46.038 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:05:46.241 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:05:46.406 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:05:46.568 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("url", (o, r) -> o.getUrl());


setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:05:46.695 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:05:46.876 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:05:46.974 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:05:47.063 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("days", (o, r) -> o.getDays());

getMap.put("extensions", (o, r) -> o.getExtensions());


setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:05:47.187 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:05:47.267 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:05:47.345 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:05:47.553 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("data", (o, r) -> o.getData());

getMap.put("message", (o, r) -> o.getMessage());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:05:47.691 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());


setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:05:47.862 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:05:47.916 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:05:47.965 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:05:48.044 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("data", (o, r) -> o.getData());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:05:48.116 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:05:48.203 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:05:48.278 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:05:48.361 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:05:48.441 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:05:48.502 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("cent", (o, r) -> o.getCent());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:05:48.608 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:06:14.751 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:06:15.754 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:06:15.955 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:06:16.297 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("name", (o, r) -> o.getName());


setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:06:16.582 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("name", (o, r) -> o.getName());


setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:06:16.797 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("cent", (o, r) -> o.getCent());


setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:06:17.088 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:06:17.443 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:06:17.591 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:06:17.830 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:06:17.978 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:06:18.104 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:06:18.287 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("url", (o, r) -> o.getUrl());


setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:06:18.425 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:06:18.590 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:06:18.733 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:06:18.813 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:06:18.949 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:06:19.032 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:06:19.116 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:06:19.329 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("data", (o, r) -> o.getData());

getMap.put("message", (o, r) -> o.getMessage());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:06:19.435 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("icp", (o, r) -> o.getIcp());


setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:06:19.605 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:06:19.671 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:06:19.720 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:06:19.823 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("data", (o, r) -> o.getData());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:06:19.912 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:06:19.995 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:06:20.083 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:06:20.243 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:06:20.358 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:06:20.417 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("cent", (o, r) -> o.getCent());


setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:06:20.533 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:06:49.295 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:06:50.265 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:06:50.461 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:06:50.795 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:06:51.067 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:06:51.284 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("birthday", (o, r) -> o.getBirthday());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:06:51.553 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:06:51.927 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:06:52.093 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:06:52.303 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:06:52.458 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:06:52.600 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:06:52.687 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:06:52.804 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:06:52.902 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:06:53.081 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:06:53.230 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:06:53.300 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:06:53.412 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:06:53.536 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:06:53.717 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:06:53.803 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("message", (o, r) -> o.getMessage());

getMap.put("data", (o, r) -> o.getData());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:06:53.956 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("description", (o, r) -> o.getDescription());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:06:54.043 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:06:54.094 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:06:54.145 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:06:54.213 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("id", (o, r) -> o.getId());

getMap.put("data", (o, r) -> o.getData());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:06:54.277 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:06:54.340 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:06:54.412 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:06:54.474 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:06:54.573 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:06:54.625 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("birthday", (o, r) -> o.getBirthday());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:06:54.757 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:06:55.702 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:06:55 CST 2024,
Tue Apr 23 22:06:55 CST 2024)
2024-04-23 22:07:04.514 TRACE_ID DEBUG main JDBCTemplate SQL:select `user_id`,
`birthday`,
`dt` from `date_test` where user_id=1
2024-04-23 22:07:54.308 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:07:55.273 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:07:55.461 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:07:55.817 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:07:56.083 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:07:56.291 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("password", (o, r) -> o.getPassword());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:07:56.555 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:07:56.909 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:07:57.162 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:07:57.404 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:07:57.540 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:07:57.692 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:07:57.829 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:07:58.053 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:07:58.184 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:07:58.366 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:07:58.502 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:07:58.585 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("days", (o, r) -> o.getDays());

getMap.put("extensions", (o, r) -> o.getExtensions());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:07:58.714 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:07:58.861 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:07:59.026 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:07:59.147 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("data", (o, r) -> o.getData());

getMap.put("message", (o, r) -> o.getMessage());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:07:59.257 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:07:59.347 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:07:59.406 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:07:59.464 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:07:59.537 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("data", (o, r) -> o.getData());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:07:59.603 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:07:59.693 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:07:59.777 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:07:59.838 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:07:59.971 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:08:00.031 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("password", (o, r) -> o.getPassword());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:08:00.161 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:08:01.056 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:08:01 CST 2024,
Tue Apr 23 22:08:01 CST 2024)
2024-04-23 22:08:06.472 TRACE_ID DEBUG main JDBCTemplate SQL:select `user_id`,
`birthday`,
`dt` from `date_test` where user_id=1
2024-04-23 22:09:23.269 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:09:24.248 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:09:24.449 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:09:24.775 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:09:25.036 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:09:25.245 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:09:25.510 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:09:25.872 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:09:26.038 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:09:26.232 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:09:26.375 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:09:26.508 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:09:26.581 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:09:26.680 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:09:26.790 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:09:26.967 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:09:27.109 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:09:27.188 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:09:27.307 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:09:27.433 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:09:27.624 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:09:27.707 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("message", (o, r) -> o.getMessage());

getMap.put("data", (o, r) -> o.getData());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:09:27.858 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());


setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:09:27.950 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:09:28.004 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:09:28.076 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:09:28.158 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("id", (o, r) -> o.getId());

getMap.put("data", (o, r) -> o.getData());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:09:28.221 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:09:28.297 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:09:28.391 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:09:28.448 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:09:28.531 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:09:28.601 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:09:28.764 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:09:30.294 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:09:29 CST 2024,
Tue Apr 23 22:09:29 CST 2024)
2024-04-23 22:09:30.296 TRACE_ID DEBUG main JDBCTemplate SQL:select `user_id`,
`birthday`,
`dt` from `date_test` where user_id=1
2024-04-23 22:09:57.596 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:09:58.661 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:09:58.859 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:09:59.153 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:09:59.465 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:09:59.663 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("birthday", (o, r) -> o.getBirthday());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:09:59.922 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:10:00.266 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:10:00.425 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:10:00.630 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:10:00.763 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:10:00.858 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:10:01.013 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:10:01.138 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:10:01.233 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:10:01.405 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:10:01.552 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:10:01.633 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:10:01.752 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:10:01.838 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:10:01.984 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:10:02.109 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("message", (o, r) -> o.getMessage());

getMap.put("data", (o, r) -> o.getData());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:10:02.254 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:10:02.382 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:10:02.442 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:10:02.493 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:10:02.567 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("id", (o, r) -> o.getId());

getMap.put("data", (o, r) -> o.getData());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:10:02.640 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:10:02.728 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:10:02.821 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:10:02.885 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:10:02.971 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:10:03.021 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("birthday", (o, r) -> o.getBirthday());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:10:03.150 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:10:20.471 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:10:21.441 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:10:21.626 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:10:21.967 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("name", (o, r) -> o.getName());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:10:22.233 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("name", (o, r) -> o.getName());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:10:22.457 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("cent", (o, r) -> o.getCent());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:10:22.719 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:10:23.079 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("id", (o, r) -> o.getId());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:10:23.265 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:10:23.492 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:10:23.645 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:10:23.800 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:10:23.888 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:10:24.016 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());


setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:10:24.128 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:10:24.332 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:10:24.477 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:10:24.559 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:10:24.681 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:10:24.811 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:10:25.026 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:10:25.132 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("message", (o, r) -> o.getMessage());

getMap.put("data", (o, r) -> o.getData());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:10:25.302 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());


setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:10:25.398 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:10:25.451 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:10:25.496 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:10:25.571 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("id", (o, r) -> o.getId());

getMap.put("data", (o, r) -> o.getData());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:10:25.638 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:10:25.695 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:10:25.770 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:10:25.834 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:10:25.930 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:10:25.996 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("cent", (o, r) -> o.getCent());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:10:26.132 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:11:16.068 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:11:17.029 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:11:17 CST 2024,
Tue Apr 23 22:11:17 CST 2024)
2024-04-23 22:11:17.030 TRACE_ID DEBUG main JDBCTemplate SQL:select `user_id`,
`birthday`,
`dt` from `date_test` where user_id=1
2024-04-23 22:11:17.043 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:11:17.293 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:11:17.736 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("name", (o, r) -> o.getName());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:11:18.028 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("name", (o, r) -> o.getName());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:11:18.229 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("cent", (o, r) -> o.getCent());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:11:18.499 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:11:18.934 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("id", (o, r) -> o.getId());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:11:19.127 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:11:19.312 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:11:19.445 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:11:19.557 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:11:19.718 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:11:19.831 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());


setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:11:19.928 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:11:20.106 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:11:20.245 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:11:20.322 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:11:20.437 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:11:20.523 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:11:20.694 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:11:20.818 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("data", (o, r) -> o.getData());

getMap.put("message", (o, r) -> o.getMessage());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:11:20.958 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("logo", (o, r) -> o.getLogo());


setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:11:21.095 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:11:21.144 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:11:21.197 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:11:21.268 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("data", (o, r) -> o.getData());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:11:21.326 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:11:21.399 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:11:21.472 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:11:21.530 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:11:21.591 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:10:04 CST 2024,
Tue Apr 23 22:10:04 CST 2024)
2024-04-23 22:11:21.598 TRACE_ID DEBUG main JDBCTemplate SQL:select `user_id`,
`birthday`,
`dt` from `date_test` where user_id=1
2024-04-23 22:11:21.627 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:11:21.687 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("cent", (o, r) -> o.getCent());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:11:21.782 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:28:27.692 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:27:38 CST 2024,
Tue Apr 23 22:27:38 CST 2024)
2024-04-23 22:28:27.693 TRACE_ID DEBUG main JDBCTemplate SQL:select `user_id`,
`birthday`,
`dt` from `date_test` where user_id=1
2024-04-23 22:30:44.809 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:30:45.818 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:30:46.021 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:30:46.316 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:30:46.643 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:30:46.829 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("birthday", (o, r) -> o.getBirthday());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:30:47.097 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:30:47.442 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:30:47.607 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:30:47.814 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:30:47.946 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:30:48.042 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:30:48.195 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:30:48.309 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:30:48.412 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:30:48.560 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:30:48.699 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:30:48.777 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:30:48.894 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:30:48.981 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:30:49.124 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:30:49.244 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("message", (o, r) -> o.getMessage());

getMap.put("data", (o, r) -> o.getData());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:30:49.377 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:30:49.518 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:30:49.578 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:30:49.634 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:30:49.704 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("id", (o, r) -> o.getId());

getMap.put("data", (o, r) -> o.getData());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:30:49.771 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:30:49.842 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:30:49.909 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:30:49.977 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:30:50.071 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:30:50.125 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("birthday", (o, r) -> o.getBirthday());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:30:50.249 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:34:27.566 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:34:04 CST 2024,
Tue Apr 23 22:34:04 CST 2024)
2024-04-23 22:34:52.811 TRACE_ID DEBUG main JDBCTemplate SQL:select `user_id`,
`birthday`,
`dt` from `date_test` where user_id=1
2024-04-23 22:34:59.880 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:35:00.672 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:35:00.891 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:35:01.239 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:35:01.501 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:35:01.738 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:35:01.984 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:35:02.330 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:35:02.500 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:35:02.694 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:35:02.821 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:35:02.972 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:35:03.121 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:35:03.264 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:35:03.352 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:35:03.495 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:35:03.614 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:35:03.696 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:35:03.813 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:35:03.896 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:35:04.033 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:35:04.171 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("data", (o, r) -> o.getData());

getMap.put("message", (o, r) -> o.getMessage());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:35:04.314 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("description", (o, r) -> o.getDescription());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:35:04.443 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:35:04.494 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:35:04.547 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:35:04.612 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("data", (o, r) -> o.getData());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:35:04.681 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:35:04.729 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:35:04.811 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:35:04.876 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:35:04.953 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:35:05.022 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:35:05.144 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:37:37.077 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:37:37.851 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:37:38.051 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:37:38.411 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:37:38.659 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:37:38.888 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("birthday", (o, r) -> o.getBirthday());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:37:39.144 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:37:39.474 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:37:39.645 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:37:39.885 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:37:40.014 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:37:40.154 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:37:40.242 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:37:40.341 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:37:40.451 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:37:40.609 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:37:40.749 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:37:40.837 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:37:40.957 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:37:41.085 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:37:41.286 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:37:41.392 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("message", (o, r) -> o.getMessage());

getMap.put("data", (o, r) -> o.getData());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:37:41.556 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("description", (o, r) -> o.getDescription());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:37:41.632 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:37:41.689 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:37:41.740 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:37:41.813 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("id", (o, r) -> o.getId());

getMap.put("data", (o, r) -> o.getData());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:37:41.877 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:37:41.942 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:37:42.013 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:37:42.077 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:37:42.287 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:37:42.404 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("birthday", (o, r) -> o.getBirthday());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:37:42.539 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:38:00.943 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:37:47 CST 2024,
Tue Apr 23 22:37:47 CST 2024)
2024-04-23 22:38:03.456 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:38:17.353 TRACE_ID DEBUG main JDBCTemplate SQL:select `user_id`,
`birthday`,
`dt` from `date_test` where user_id=1
2024-04-23 22:38:41.621 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:38:42.417 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:38:42.602 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:38:43.168 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:38:43.446 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:38:43.654 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("birthday", (o, r) -> o.getBirthday());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:38:43.895 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:38:44.199 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:38:44.378 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:38:44.571 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:38:44.697 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:38:44.721 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:38:44.819 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:38:44.981 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:38:45.088 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:38:45.193 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:38:45.388 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:38:45.524 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:38:45.611 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:38:45.732 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:38:45.816 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:38:45.975 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:38:46.094 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("message", (o, r) -> o.getMessage());

getMap.put("data", (o, r) -> o.getData());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:38:46.227 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("description", (o, r) -> o.getDescription());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:38:46.357 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:38:46.413 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:38:46.461 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:38:46.537 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("id", (o, r) -> o.getId());

getMap.put("data", (o, r) -> o.getData());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:38:46.610 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:38:46.683 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:38:46.747 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:38:46.812 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:38:46.887 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:38:46.945 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("birthday", (o, r) -> o.getBirthday());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:38:47.052 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:38:52.765 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:38:49 CST 2024,
Tue Apr 23 22:38:49 CST 2024)
2024-04-23 22:38:52.795 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:38:52.798 TRACE_ID DEBUG main JDBCTemplate SQL:select `id`,
`birthday`,
`dt` from `date_test` where id=1
2024-04-23 22:38:52.804 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:57:09.117 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:57:09.881 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:57:10.061 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:57:10.235 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("name", (o, r) -> o.getName());


setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:57:10.499 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("name", (o, r) -> o.getName());


setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:57:10.923 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("password", (o, r) -> o.getPassword());


setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:57:11.171 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:57:11.492 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("id", (o, r) -> o.getId());


setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:57:11.643 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:57:11.727 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:57:11.798 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:57:11.883 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:57:12.066 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:57:12.209 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());


setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:57:12.316 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:57:12.484 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:57:12.606 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:57:12.671 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("days", (o, r) -> o.getDays());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("extensions", (o, r) -> o.getExtensions());


setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:57:12.764 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:57:12.841 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:57:12.922 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:57:13.051 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("data", (o, r) -> o.getData());

getMap.put("message", (o, r) -> o.getMessage());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:57:13.136 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());


setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:57:13.215 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:57:13.424 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:57:13.521 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:57:13.631 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("data", (o, r) -> o.getData());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:57:13.702 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("list", (o, r) -> o.getList());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:57:13.766 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:57:13.830 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:57:13.883 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:57:13.963 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:57:14.071 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("password", (o, r) -> o.getPassword());


setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:57:14.288 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:57:14.997 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:57:14 CST 2024,
Tue Apr 23 22:57:14 CST 2024)
2024-04-23 22:57:15.014 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:57:15.016 TRACE_ID DEBUG main JDBCTemplate SQL:select `id`,
`birthday`,
`dt` from `date_test` where id=1
2024-04-23 22:57:15.020 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:57:33.790 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:57:34.523 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:57:34.694 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:57:34.849 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:57:35.127 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:57:35.400 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("password", (o, r) -> o.getPassword());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:57:35.662 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:57:36.193 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:57:36.376 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:57:36.475 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:57:36.541 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:57:36.609 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:57:36.682 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:57:36.787 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:57:36.873 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:57:37.026 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:57:37.139 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:57:37.208 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:57:37.307 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:57:37.376 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:57:37.436 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:57:37.508 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("message", (o, r) -> o.getMessage());

getMap.put("data", (o, r) -> o.getData());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:57:37.666 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:57:37.873 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:57:37.969 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:57:38.007 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:57:38.086 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("id", (o, r) -> o.getId());

getMap.put("data", (o, r) -> o.getData());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:57:38.147 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:57:38.209 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:57:38.279 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:57:38.341 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:57:38.418 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:57:38.470 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("password", (o, r) -> o.getPassword());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:57:38.573 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:57:39.091 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:57:39 CST 2024,
Tue Apr 23 22:57:39 CST 2024)
2024-04-23 22:57:39.105 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:57:39.107 TRACE_ID DEBUG main JDBCTemplate SQL:select `id`,
`birthday`,
`dt` from `date_test` where id=1
2024-04-23 22:57:39.110 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:58:48.685 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:58:49.430 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:58:49.614 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:58:49.782 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:58:50.034 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:58:50.465 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("password", (o, r) -> o.getPassword());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:58:50.706 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:58:51.023 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:58:51.188 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:58:51.270 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:58:51.338 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:58:51.408 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:58:51.604 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:58:51.746 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:58:51.819 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("list", (o, r) -> o.getList());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:58:51.963 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("code", (o, r) -> o.getCode());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:58:52.083 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:58:52.152 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("days", (o, r) -> o.getDays());

getMap.put("userName", (o, r) -> o.getUserName());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:58:52.244 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:58:52.314 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:58:52.386 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:58:52.449 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("message", (o, r) -> o.getMessage());

getMap.put("data", (o, r) -> o.getData());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:58:52.551 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("description", (o, r) -> o.getDescription());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:58:52.793 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:58:52.910 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:58:52.957 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:58:53.031 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("id", (o, r) -> o.getId());

getMap.put("data", (o, r) -> o.getData());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:58:53.090 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:58:53.151 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:58:53.216 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:58:53.265 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:58:53.346 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:58:53.384 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("password", (o, r) -> o.getPassword());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:58:53.458 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:58:54.108 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:58:54 CST 2024,
Tue Apr 23 22:58:54 CST 2024)
2024-04-23 22:58:54.126 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:58:54.127 TRACE_ID DEBUG main JDBCTemplate SQL:select `id`,
`birthday`,
`dt` from `date_test` where id=1
2024-04-23 22:58:54.131 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:59:38.118 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:59:38.857 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:59:39.054 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:59:39.223 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:59:39.480 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("age", (o, r) -> o.getAge());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("name", (o, r) -> o.getName());


setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:59:39.900 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("password", (o, r) -> o.getPassword());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:59:40.145 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:59:40.467 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:59:40.616 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:59:40.716 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:59:40.782 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:59:40.862 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:59:41.071 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:59:41.191 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:59:41.267 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:59:41.405 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:59:41.506 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:59:41.576 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("days", (o, r) -> o.getDays());

getMap.put("extensions", (o, r) -> o.getExtensions());

getMap.put("userName", (o, r) -> o.getUserName());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:59:41.669 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:59:41.741 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:59:41.788 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:59:41.851 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("data", (o, r) -> o.getData());

getMap.put("message", (o, r) -> o.getMessage());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:59:41.930 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("description", (o, r) -> o.getDescription());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:59:42.104 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:59:42.218 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:59:42.279 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:59:42.397 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("data", (o, r) -> o.getData());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:59:42.468 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:59:42.587 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:59:42.729 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:59:42.785 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:59:42.846 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:59:42.884 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("password", (o, r) -> o.getPassword());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:59:42.970 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:59:43.575 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:59:43 CST 2024,
Tue Apr 23 22:59:43 CST 2024)
2024-04-23 22:59:43.589 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:59:43.590 TRACE_ID DEBUG main JDBCTemplate SQL:select `id`,
`birthday`,
`dt` from `date_test` where id=1
2024-04-23 22:59:43.593 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:59:49.648 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class User3MethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.cg.User3, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.cg.User3, Object>> setMap = new HashMap<>();

static {

getMap.put("user", (o, r) -> o.getUser());


setMap.put("user", (o, arg) -> o.setUser((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;return getMap.get(methodName).apply(user3,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.cg.User3 user3=(com.sparrow.cg.User3)o;
 setMap.get(methodName).accept(user3,arg);}
}
2024-04-23 22:59:50.414 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ActualMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Actual, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Actual, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;return getMap.get(methodName).apply(actual,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Actual actual=(com.sparrow.jdk.collections.PairCollectionTest$Actual)o;
 setMap.get(methodName).accept(actual,arg);}
}
2024-04-23 22:59:50.611 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ExpectedMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.jdk.collections.PairCollectionTest$Expected, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.jdk.collections.PairCollectionTest$Expected, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;return getMap.get(methodName).apply(expected,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.jdk.collections.PairCollectionTest$Expected expected=(com.sparrow.jdk.collections.PairCollectionTest$Expected)o;
 setMap.get(methodName).accept(expected,arg);}
}
2024-04-23 22:59:50.770 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SourceMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Source, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Source, Object>> setMap = new HashMap<>();

static {

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;return getMap.get(methodName).apply(source,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Source source=(com.sparrow.facade.beans.Source)o;
 setMap.get(methodName).accept(source,arg);}
}
2024-04-23 22:59:51.224 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TargetMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.facade.beans.Target, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.facade.beans.Target, Object>> setMap = new HashMap<>();

static {

getMap.put("money", (o, r) -> o.getMoney());

getMap.put("sb", (o, r) -> o.getSb());

getMap.put("age", (o, r) -> o.getAge());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("name", (o, r) -> o.getName());


setMap.put("sb", (o, arg) -> o.setSb((java.lang.Boolean) arg));

setMap.put("money", (o, arg) -> o.setMoney((java.math.BigDecimal) arg));

setMap.put("age", (o, arg) -> o.setAge((java.lang.Integer) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;return getMap.get(methodName).apply(target,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.facade.beans.Target target=(com.sparrow.facade.beans.Target)o;
 setMap.get(methodName).accept(target,arg);}
}
2024-04-23 22:59:51.415 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("birthday", (o, r) -> o.getBirthday());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:59:51.666 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:59:51.995 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DateTestMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.DateTest, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.DateTest, Object>> setMap = new HashMap<>();

static {

getMap.put("dt", (o, r) -> o.getDt());

getMap.put("birthday", (o, r) -> o.getBirthday());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("dt", (o, arg) -> o.setDt((java.util.Date) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.util.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;return getMap.get(methodName).apply(dateTest,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.DateTest dateTest=(com.sparrow.orm.po.DateTest)o;
 setMap.get(methodName).accept(dateTest,arg);}
}
2024-04-23 22:59:52.161 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.rocketmq.protocol.event.HelloEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.rocketmq.protocol.event.HelloEvent, Object>> setMap = new HashMap<>();

static {

getMap.put("message", (o, r) -> o.getMessage());


setMap.put("message", (o, arg) -> o.setMessage((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;return getMap.get(methodName).apply(helloEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.rocketmq.protocol.event.HelloEvent helloEvent=(com.sparrow.rocketmq.protocol.event.HelloEvent)o;
 setMap.get(methodName).accept(helloEvent,arg);}
}
2024-04-23 22:59:52.254 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class JsonVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.JsonVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.JsonVO, Object>> setMap = new HashMap<>();

static {

getMap.put("json", (o, r) -> o.getJson());


setMap.put("json", (o, arg) -> o.setJson((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;return getMap.get(methodName).apply(jsonVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.JsonVO jsonVO=(com.sparrow.vo.JsonVO)o;
 setMap.get(methodName).accept(jsonVO,arg);}
}
2024-04-23 22:59:52.432 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HelloVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.vo.HelloVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.vo.HelloVO, Object>> setMap = new HashMap<>();

static {

getMap.put("hello", (o, r) -> o.getHello());


}
public Object get(Object o, String methodName){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;return getMap.get(methodName).apply(helloVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.vo.HelloVO helloVO=(com.sparrow.vo.HelloVO)o;
 setMap.get(methodName).accept(helloVO,arg);}
}
2024-04-23 22:59:52.562 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class KeyPOJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.core.algorithm.collections.KeyPOJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.core.algorithm.collections.KeyPOJO, Object>> setMap = new HashMap<>();

static {

getMap.put("key", (o, r) -> o.getKey());


setMap.put("key", (o, arg) -> o.setKey((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;return getMap.get(methodName).apply(keyPOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.core.algorithm.collections.KeyPOJO keyPOJO=(com.sparrow.core.algorithm.collections.KeyPOJO)o;
 setMap.get(methodName).accept(keyPOJO,arg);}
}
2024-04-23 22:59:52.686 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ImageDTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.image.ImageDTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.image.ImageDTO, Object>> setMap = new HashMap<>();

static {

getMap.put("inner", (o, r) -> o.getInner());

getMap.put("remark", (o, r) -> o.getRemark());

getMap.put("imageId", (o, r) -> o.getImageId());

getMap.put("imageMark", (o, r) -> o.getImageMark());

getMap.put("extension", (o, r) -> o.getExtension());


setMap.put("inner", (o, arg) -> o.setInner((java.lang.Boolean) arg));

setMap.put("remark", (o, arg) -> o.setRemark((java.lang.String) arg));

setMap.put("extension", (o, arg) -> o.setExtension((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;return getMap.get(methodName).apply(imageDTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.image.ImageDTO imageDTO=(com.sparrow.image.ImageDTO)o;
 setMap.get(methodName).accept(imageDTO,arg);}
}
2024-04-23 22:59:52.845 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginDialogMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.LoginDialog, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.LoginDialog, Object>> setMap = new HashMap<>();

static {

getMap.put("url", (o, r) -> o.getUrl());

getMap.put("login", (o, r) -> o.getLogin());

getMap.put("showHead", (o, r) -> o.getShowHead());

getMap.put("inFrame", (o, r) -> o.getInFrame());


setMap.put("url", (o, arg) -> o.setUrl((java.lang.String) arg));

setMap.put("login", (o, arg) -> o.setLogin((java.lang.Boolean) arg));

setMap.put("showHead", (o, arg) -> o.setShowHead((java.lang.Boolean) arg));

setMap.put("inFrame", (o, arg) -> o.setInFrame((java.lang.Boolean) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;return getMap.get(methodName).apply(loginDialog,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.LoginDialog loginDialog=(com.sparrow.support.LoginDialog)o;
 setMap.get(methodName).accept(loginDialog,arg);}
}
2024-04-23 22:59:52.934 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class HtmlPagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.support.pager.HtmlPagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.support.pager.HtmlPagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("simple", (o, r) -> o.isSimple());

getMap.put("html", (o, r) -> o.getHtml());

getMap.put("indexPageFormat", (o, r) -> o.getIndexPageFormat());

getMap.put("pageFormat", (o, r) -> o.getPageFormat());

getMap.put("pageNumberCount", (o, r) -> o.getPageNumberCount());

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("indexPageFormat", (o, arg) -> o.setIndexPageFormat((java.lang.String) arg));

setMap.put("pageFormat", (o, arg) -> o.setPageFormat((java.lang.String) arg));

setMap.put("pageNumberCount", (o, arg) -> o.setPageNumberCount((java.lang.Integer) arg));

setMap.put("simple", (o, arg) -> o.setSimple((java.lang.Boolean) arg));

setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;return getMap.get(methodName).apply(htmlPagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.support.pager.HtmlPagerResult htmlPagerResult=(com.sparrow.support.pager.HtmlPagerResult)o;
 setMap.get(methodName).accept(htmlPagerResult,arg);}
}
2024-04-23 22:59:53.079 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class TreeItemMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.TreeItem, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.TreeItem, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("icon", (o, r) -> o.getIcon());

getMap.put("parentId", (o, r) -> o.getParentId());

getMap.put("name", (o, r) -> o.getName());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Integer) arg));

setMap.put("code", (o, arg) -> o.setCode((java.lang.String) arg));

setMap.put("icon", (o, arg) -> o.setIcon((java.lang.String) arg));

setMap.put("parentId", (o, arg) -> o.setParentId((java.lang.Integer) arg));

setMap.put("name", (o, arg) -> o.setName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;return getMap.get(methodName).apply(treeItem,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.TreeItem treeItem=(com.sparrow.protocol.TreeItem)o;
 setMap.get(methodName).accept(treeItem,arg);}
}
2024-04-23 22:59:53.195 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class QueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Query, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Query, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;return getMap.get(methodName).apply(query,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Query query=(com.sparrow.protocol.Query)o;
 setMap.get(methodName).accept(query,arg);}
}
2024-04-23 22:59:53.274 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class LoginUserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.LoginUser, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.LoginUser, Object>> setMap = new HashMap<>();

static {

getMap.put("expireAt", (o, r) -> o.getExpireAt());

getMap.put("visitor", (o, r) -> o.isVisitor());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("days", (o, r) -> o.getDays());

getMap.put("extensions", (o, r) -> o.getExtensions());


setMap.put("days", (o, arg) -> o.setDays((java.lang.Integer) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("expireAt", (o, arg) -> o.setExpireAt((java.lang.Long) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("extensions", (o, arg) -> o.setExtensions((java.util.Map) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;return getMap.get(methodName).apply(loginUser,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.LoginUser loginUser=(com.sparrow.protocol.LoginUser)o;
 setMap.get(methodName).accept(loginUser,arg);}
}
2024-04-23 22:59:53.382 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POJOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.POJO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.POJO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;return getMap.get(methodName).apply(pOJO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.POJO pOJO=(com.sparrow.protocol.POJO)o;
 setMap.get(methodName).accept(pOJO,arg);}
}
2024-04-23 22:59:53.465 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class BOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.BO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.BO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;return getMap.get(methodName).apply(bO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.BO bO=(com.sparrow.protocol.BO)o;
 setMap.get(methodName).accept(bO,arg);}
}
2024-04-23 22:59:53.543 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class VOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.VO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.VO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;return getMap.get(methodName).apply(vO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.VO vO=(com.sparrow.protocol.VO)o;
 setMap.get(methodName).accept(vO,arg);}
}
2024-04-23 22:59:53.751 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Result, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Result, Object>> setMap = new HashMap<>();

static {

getMap.put("code", (o, r) -> o.getCode());

getMap.put("success", (o, r) -> o.isSuccess());

getMap.put("data", (o, r) -> o.getData());

getMap.put("message", (o, r) -> o.getMessage());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;return getMap.get(methodName).apply(result,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Result result=(com.sparrow.protocol.Result)o;
 setMap.get(methodName).accept(result,arg);}
}
2024-04-23 22:59:53.887 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class WebsiteConfigMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.WebsiteConfig, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.WebsiteConfig, Object>> setMap = new HashMap<>();

static {

getMap.put("icp", (o, r) -> o.getIcp());

getMap.put("logo", (o, r) -> o.getLogo());

getMap.put("title", (o, r) -> o.getTitle());

getMap.put("keywords", (o, r) -> o.getKeywords());

getMap.put("banner", (o, r) -> o.getBanner());

getMap.put("bannerFlash", (o, r) -> o.getBannerFlash());

getMap.put("contact", (o, r) -> o.getContact());

getMap.put("description", (o, r) -> o.getDescription());


setMap.put("title", (o, arg) -> o.setTitle((java.lang.String) arg));

setMap.put("icp", (o, arg) -> o.setIcp((java.lang.String) arg));

setMap.put("logo", (o, arg) -> o.setLogo((java.lang.String) arg));

setMap.put("description", (o, arg) -> o.setDescription((java.lang.String) arg));

setMap.put("keywords", (o, arg) -> o.setKeywords((java.lang.String) arg));

setMap.put("contact", (o, arg) -> o.setContact((java.lang.String) arg));

setMap.put("banner", (o, arg) -> o.setBanner((java.lang.String) arg));

setMap.put("bannerFlash", (o, arg) -> o.setBannerFlash((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;return getMap.get(methodName).apply(websiteConfig,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.WebsiteConfig websiteConfig=(com.sparrow.protocol.WebsiteConfig)o;
 setMap.get(methodName).accept(websiteConfig,arg);}
}
2024-04-23 22:59:54.019 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class ParamMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Param, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Param, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;return getMap.get(methodName).apply(param,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Param param=(com.sparrow.protocol.Param)o;
 setMap.get(methodName).accept(param,arg);}
}
2024-04-23 22:59:54.073 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DTOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.DTO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.DTO, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;return getMap.get(methodName).apply(dTO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.DTO dTO=(com.sparrow.protocol.DTO)o;
 setMap.get(methodName).accept(dTO,arg);}
}
2024-04-23 22:59:54.124 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SizeMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.Size, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.Size, Object>> setMap = new HashMap<>();

static {

getMap.put("heightPX", (o, r) -> o.getHeightPX());

getMap.put("containerWidth", (o, r) -> o.getContainerWidth());

getMap.put("containerWidthPX", (o, r) -> o.getContainerWidthPX());

getMap.put("containerHeightPX", (o, r) -> o.getContainerHeightPX());

getMap.put("widthPX", (o, r) -> o.getWidthPX());

getMap.put("width", (o, r) -> o.getWidth());

getMap.put("height", (o, r) -> o.getHeight());


}
public Object get(Object o, String methodName){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;return getMap.get(methodName).apply(size,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.Size size=(com.sparrow.protocol.Size)o;
 setMap.get(methodName).accept(size,arg);}
}
2024-04-23 22:59:54.200 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class IdentityVOMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.IdentityVO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.IdentityVO, Object>> setMap = new HashMap<>();

static {

getMap.put("data", (o, r) -> o.getData());

getMap.put("id", (o, r) -> o.getId());


setMap.put("id", (o, arg) -> o.setId((java.lang.Long) arg));

setMap.put("data", (o, arg) -> o.setData((java.lang.Object) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;return getMap.get(methodName).apply(identityVO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.IdentityVO identityVO=(com.sparrow.protocol.IdentityVO)o;
 setMap.get(methodName).accept(identityVO,arg);}
}
2024-04-23 22:59:54.273 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class PagerResultMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.PagerResult, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.PagerResult, Object>> setMap = new HashMap<>();

static {

getMap.put("list", (o, r) -> o.getList());

getMap.put("recordTotal", (o, r) -> o.getRecordTotal());

getMap.put("lastPageIndex", (o, r) -> o.getLastPageIndex());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("list", (o, arg) -> o.setList((java.util.List) arg));

setMap.put("recordTotal", (o, arg) -> o.setRecordTotal((java.lang.Long) arg));

setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;return getMap.get(methodName).apply(pagerResult,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.PagerResult pagerResult=(com.sparrow.protocol.pager.PagerResult)o;
 setMap.get(methodName).accept(pagerResult,arg);}
}
2024-04-23 22:59:54.339 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class SimplePagerMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.pager.SimplePager, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.pager.SimplePager, Object>> setMap = new HashMap<>();

static {

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;return getMap.get(methodName).apply(simplePager,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.pager.SimplePager simplePager=(com.sparrow.protocol.pager.SimplePager)o;
 setMap.get(methodName).accept(simplePager,arg);}
}
2024-04-23 22:59:54.410 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class DatabasePagerQueryMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.DatabasePagerQuery, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.DatabasePagerQuery, Object>> setMap = new HashMap<>();

static {

getMap.put("limit", (o, r) -> o.getLimit());

getMap.put("pageSize", (o, r) -> o.getPageSize());

getMap.put("pageNo", (o, r) -> o.getPageNo());


setMap.put("pageSize", (o, arg) -> o.setPageSize((java.lang.Integer) arg));

setMap.put("pageNo", (o, arg) -> o.setPageNo((java.lang.Integer) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;return getMap.get(methodName).apply(databasePagerQuery,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.DatabasePagerQuery databasePagerQuery=(com.sparrow.protocol.dao.DatabasePagerQuery)o;
 setMap.get(methodName).accept(databasePagerQuery,arg);}
}
2024-04-23 22:59:54.474 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class POMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.protocol.dao.PO, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.protocol.dao.PO, Object>> setMap = new HashMap<>();

static {

getMap.put("createUserId", (o, r) -> o.getCreateUserId());

getMap.put("gmtCreate", (o, r) -> o.getGmtCreate());

getMap.put("modifiedUserId", (o, r) -> o.getModifiedUserId());

getMap.put("gmtModified", (o, r) -> o.getGmtModified());

getMap.put("createUserName", (o, r) -> o.getCreateUserName());

getMap.put("modifiedUserName", (o, r) -> o.getModifiedUserName());


setMap.put("createUserId", (o, arg) -> o.setCreateUserId((java.lang.Long) arg));

setMap.put("modifiedUserId", (o, arg) -> o.setModifiedUserId((java.lang.Long) arg));

setMap.put("gmtCreate", (o, arg) -> o.setGmtCreate((java.lang.Long) arg));

setMap.put("gmtModified", (o, arg) -> o.setGmtModified((java.lang.Long) arg));

setMap.put("createUserName", (o, arg) -> o.setCreateUserName((java.lang.String) arg));

setMap.put("modifiedUserName", (o, arg) -> o.setModifiedUserName((java.lang.String) arg));

}
public Object get(Object o, String methodName){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;return getMap.get(methodName).apply(pO,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.protocol.dao.PO pO=(com.sparrow.protocol.dao.PO)o;
 setMap.get(methodName).accept(pO,arg);}
}
2024-04-23 22:59:54.555 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class MQEventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.mq.MQEvent, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.mq.MQEvent, Object>> setMap = new HashMap<>();

static {


}
public Object get(Object o, String methodName){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;return getMap.get(methodName).apply(mQEvent,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.mq.MQEvent mQEvent=(com.sparrow.mq.MQEvent)o;
 setMap.get(methodName).accept(mQEvent,arg);}
}
2024-04-23 22:59:54.613 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class UserMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.User, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.User, Object>> setMap = new HashMap<>();

static {

getMap.put("cent", (o, r) -> o.getCent());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("nickName", (o, r) -> o.getNickName());

getMap.put("gender", (o, r) -> o.getGender());

getMap.put("status", (o, r) -> o.getStatus());

getMap.put("avatar", (o, r) -> o.getAvatar());

getMap.put("password", (o, r) -> o.getPassword());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("userName", (o, r) -> o.getUserName());

getMap.put("birthday", (o, r) -> o.getBirthday());


setMap.put("cent", (o, arg) -> o.setCent((java.lang.Long) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("gender", (o, arg) -> o.setGender((java.lang.Integer) arg));

setMap.put("status", (o, arg) -> o.setStatus((java.lang.Byte) arg));

setMap.put("password", (o, arg) -> o.setPassword((java.lang.String) arg));

setMap.put("nickName", (o, arg) -> o.setNickName((java.lang.String) arg));

setMap.put("avatar", (o, arg) -> o.setAvatar((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

setMap.put("userName", (o, arg) -> o.setUserName((java.lang.String) arg));

setMap.put("birthday", (o, arg) -> o.setBirthday((java.sql.Date) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;return getMap.get(methodName).apply(user,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.User user=(com.sparrow.orm.po.User)o;
 setMap.get(methodName).accept(user,arg);}
}
2024-04-23 22:59:54.710 TRACE_ID DEBUG main Generator4MethodAccessor package com.sparrow.accessMethod;
import com.sparrow.cg.MethodAccessor;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;

 public class EventMethodAccess  implements MethodAccessor{
private static Map<String, BiFunction<com.sparrow.orm.po.Event, String, Object>> getMap = new HashMap<>();
        private static Map<String, BiConsumer<com.sparrow.orm.po.Event, Object>> setMap = new HashMap<>();

static {

getMap.put("times", (o, r) -> o.getTimes());

getMap.put("ip", (o, r) -> o.getIp());

getMap.put("event", (o, r) -> o.getEvent());

getMap.put("appId", (o, r) -> o.getAppId());

getMap.put("os", (o, r) -> o.getOs());

getMap.put("imei", (o, r) -> o.getImei());

getMap.put("bssid", (o, r) -> o.getBssid());

getMap.put("ssid", (o, r) -> o.getSsid());

getMap.put("idfa", (o, r) -> o.getIdfa());

getMap.put("eventId", (o, r) -> o.getEventId());

getMap.put("userType", (o, r) -> o.getUserType());

getMap.put("businessType", (o, r) -> o.getBusinessType());

getMap.put("businessId", (o, r) -> o.getBusinessId());

getMap.put("device", (o, r) -> o.getDevice());

getMap.put("deviceId", (o, r) -> o.getDeviceId());

getMap.put("deviceModel", (o, r) -> o.getDeviceModel());

getMap.put("website", (o, r) -> o.getWebsite());

getMap.put("appVersion", (o, r) -> o.getAppVersion());

getMap.put("platform", (o, r) -> o.getPlatform());

getMap.put("userAgent", (o, r) -> o.getUserAgent());

getMap.put("clientVersion", (o, r) -> o.getClientVersion());

getMap.put("longitude", (o, r) -> o.getLongitude());

getMap.put("latitude", (o, r) -> o.getLatitude());

getMap.put("network", (o, r) -> o.getNetwork());

getMap.put("simulate", (o, r) -> o.getSimulate());

getMap.put("startTime", (o, r) -> o.getStartTime());

getMap.put("resumeTime", (o, r) -> o.getResumeTime());

getMap.put("createTime", (o, r) -> o.getCreateTime());

getMap.put("updateTime", (o, r) -> o.getUpdateTime());

getMap.put("userId", (o, r) -> o.getUserId());

getMap.put("content", (o, r) -> o.getContent());

getMap.put("channel", (o, r) -> o.getChannel());


setMap.put("event", (o, arg) -> o.setEvent((java.lang.String) arg));

setMap.put("appId", (o, arg) -> o.setAppId((java.lang.Integer) arg));

setMap.put("bssid", (o, arg) -> o.setBssid((java.lang.String) arg));

setMap.put("times", (o, arg) -> o.setTimes((java.lang.Integer) arg));

setMap.put("idfa", (o, arg) -> o.setIdfa((java.lang.String) arg));

setMap.put("imei", (o, arg) -> o.setImei((java.lang.String) arg));

setMap.put("ip", (o, arg) -> o.setIp((java.lang.String) arg));

setMap.put("os", (o, arg) -> o.setOs((java.lang.String) arg));

setMap.put("ssid", (o, arg) -> o.setSsid((java.lang.String) arg));

setMap.put("eventId", (o, arg) -> o.setEventId((java.lang.Long) arg));

setMap.put("startTime", (o, arg) -> o.setStartTime((java.lang.Long) arg));

setMap.put("businessId", (o, arg) -> o.setBusinessId((java.lang.Long) arg));

setMap.put("businessType", (o, arg) -> o.setBusinessType((java.lang.String) arg));

setMap.put("appVersion", (o, arg) -> o.setAppVersion((java.lang.Float) arg));

setMap.put("channel", (o, arg) -> o.setChannel((java.lang.String) arg));

setMap.put("clientVersion", (o, arg) -> o.setClientVersion((java.lang.String) arg));

setMap.put("content", (o, arg) -> o.setContent((java.lang.String) arg));

setMap.put("createTime", (o, arg) -> o.setCreateTime((java.lang.Long) arg));

setMap.put("device", (o, arg) -> o.setDevice((java.lang.String) arg));

setMap.put("deviceModel", (o, arg) -> o.setDeviceModel((java.lang.String) arg));

setMap.put("resumeTime", (o, arg) -> o.setResumeTime((java.lang.Long) arg));

setMap.put("platform", (o, arg) -> o.setPlatform((com.sparrow.protocol.enums.Platform) arg));

setMap.put("latitude", (o, arg) -> o.setLatitude((java.lang.Double) arg));

setMap.put("longitude", (o, arg) -> o.setLongitude((java.lang.Double) arg));

setMap.put("network", (o, arg) -> o.setNetwork((java.lang.String) arg));

setMap.put("simulate", (o, arg) -> o.setSimulate((java.lang.Boolean) arg));

setMap.put("updateTime", (o, arg) -> o.setUpdateTime((java.lang.Long) arg));

setMap.put("userType", (o, arg) -> o.setUserType((java.lang.String) arg));

setMap.put("userAgent", (o, arg) -> o.setUserAgent((java.lang.String) arg));

setMap.put("website", (o, arg) -> o.setWebsite((java.lang.String) arg));

setMap.put("deviceId", (o, arg) -> o.setDeviceId((java.lang.String) arg));

setMap.put("userId", (o, arg) -> o.setUserId((java.lang.Long) arg));

}
public Object get(Object o, String methodName){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;return getMap.get(methodName).apply(event,methodName);}
public void set(Object o, String methodName,Object arg){
com.sparrow.orm.po.Event event=(com.sparrow.orm.po.Event)o;
 setMap.get(methodName).accept(event,arg);}
}
2024-04-23 22:59:57.959 TRACE_ID DEBUG main JDBCTemplate SQL:insert into `date_test`(
`birthday`,
`dt`)values(
Tue Apr 23 22:59:57 CST 2024,
Tue Apr 23 22:59:57 CST 2024)
2024-04-23 22:59:57.985 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
2024-04-23 22:59:57.988 TRACE_ID DEBUG main JDBCTemplate SQL:select `id`,
`birthday`,
`dt` from `date_test` where id=1
2024-04-23 22:59:57.992 TRACE_ID DEBUG main ProxyConnection release-->connection pool size:1used pool size:0
